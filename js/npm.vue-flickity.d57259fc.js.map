{"version":3,"sources":["webpack:///./node_modules/vue-flickity/src/flickity.vue?4102","webpack:///node_modules/vue-flickity/src/flickity.vue","webpack:///./node_modules/vue-flickity/src/flickity.vue?a1fa","webpack:///./node_modules/vue-flickity/src/flickity.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","_t","staticRenderFns","props","options","Object","mounted","init","beforeDestroy","$flickity","destroy","methods","Flickity","$el","$emit","flickity","select","index","isWrapped","isInstant","next","previous","selectCell","value","resize","reposition","prepend","elements","append","insert","remove","playPlayer","stopPlayer","pausePlayer","unpausePlayer","rerender","reloadCells","getCellElements","data","on","eventName","listener","off","once","selectedElement","selectedElements","selectedIndex","cells","slides","disableDrag","draggable","updateDraggable","enableDrag","component"],"mappings":"kHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACJ,EAAIM,GAAG,YAAY,IACzHC,EAAkB,GCMtB,GACEC,MAAO,CACLC,QAASC,QAGXC,QALF,WAMIV,KAAKW,QAGPC,cATF,WAUIZ,KAAKa,UAAUC,UACfd,KAAKa,UAAY,MAGnBE,QAAS,CAIPJ,KAJJ,WAKM,IAAN,YAEMX,KAAKa,UAAY,IAAIG,EAAShB,KAAKiB,IAAKjB,KAAKQ,SAC7CR,KAAKkB,MAAM,OAAQlB,KAAKa,YAQ1BM,SAhBJ,WAiBM,OAAOnB,KAAKa,WAcdO,OA/BJ,SA+BA,OACMpB,KAAKa,UAAUO,OAAOC,EAAOC,EAAWC,IAS1CC,KAzCJ,SAyCA,KACMxB,KAAKa,UAAUW,KAAKF,EAAWC,IASjCE,SAnDJ,SAmDA,KACMzB,KAAKa,UAAUY,SAASH,EAAWC,IAUrCG,WA9DJ,SA8DA,OACM1B,KAAKa,UAAUa,WAAWC,EAAOL,EAAWC,IAU9CK,OAzEJ,WA0EM5B,KAAKa,UAAUe,UAMjBC,WAhFJ,WAiFM7B,KAAKa,UAAUgB,cAYjBC,QA7FJ,SA6FA,GACM9B,KAAKa,UAAUiB,QAAQC,IAQzBC,OAtGJ,SAsGA,GACMhC,KAAKa,UAAUmB,OAAOD,IASxBE,OAhHJ,SAgHA,KACMjC,KAAKa,UAAUoB,OAAOF,EAAUV,IAQlCa,OAzHJ,SAyHA,GACMlC,KAAKa,UAAUqB,OAAOH,IAUxBI,WApIJ,WAqIMnC,KAAKa,UAAUsB,cAMjBC,WA3IJ,WA4IMpC,KAAKa,UAAUuB,cAMjBC,YAlJJ,WAmJMrC,KAAKa,UAAUwB,eAMjBC,cAzJJ,WA0JMtC,KAAKa,UAAUyB,iBAMjBC,SAhKJ,WAiKMvC,KAAKa,UAAUC,UACfd,KAAKW,QAUPG,QA5KJ,WA6KMd,KAAKa,UAAUC,WAMjB0B,YAnLJ,WAoLMxC,KAAKa,UAAU2B,eAQjBC,gBA5LJ,WA6LM,OAAOzC,KAAKa,UAAU4B,mBAQxBC,KArMJ,WAsMM,IAAN,YAEM,OAAO1B,EAAS0B,KAAK1C,KAAKiB,MAa5B0B,GArNJ,SAqNA,KACM3C,KAAKa,UAAU8B,GAAGC,EAAWC,IAS/BC,IA/NJ,SA+NA,KACM9C,KAAKa,UAAUiC,IAAIF,EAAWC,IAShCE,KAzOJ,SAyOA,KACM/C,KAAKa,UAAUkC,KAAKH,EAAWC,IAYjCG,gBAtPJ,WAuPM,OAAOhD,KAAKa,UAAUmC,iBAQxBC,iBA/PJ,WAgQM,OAAOjD,KAAKa,UAAUoC,kBAQxBC,cAxQJ,WAyQM,OAAOlD,KAAKa,UAAUqC,eAQxBC,MAjRJ,WAkRM,OAAOnD,KAAKa,UAAUsC,OAQxBC,OA1RJ,WA2RM,OAAOpD,KAAKa,UAAUuC,QAMxBC,YAjSJ,WAkSMrD,KAAKa,UAAUL,QAAQ8C,WAAY,EACnCtD,KAAKa,UAAU0C,mBAMjBC,WAzSJ,WA0SMxD,KAAKa,UAAUL,QAAQ8C,WAAY,EACnCtD,KAAKa,UAAU0C,qBChU4P,I,wBCQ7QE,EAAY,eACd,EACA3D,EACAQ,GACA,EACA,KACA,KACA,MAIa,OAAAmD,E","file":"js/npm.vue-flickity.d57259fc.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._t(\"default\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <slot />\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    options: Object,\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  beforeDestroy() {\n    this.$flickity.destroy();\n    this.$flickity = null;\n  },\n\n  methods: {\n    /**\n     * Initialize a new flickity and emit init event.\n     */\n    init() {\n      const Flickity = require('flickity');\n\n      this.$flickity = new Flickity(this.$el, this.options);\n      this.$emit('init', this.$flickity);\n    },\n\n    /**\n     * Return the current flickity instance to access directly\n     *\n     * @return {Flickity}\n     */\n    flickity() {\n      return this.$flickity;\n    },\n\n    /**\n     * Selecting Slides\n     */\n\n    /**\n     * Select a slide\n     *\n     * @param {number} index\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    select(index, isWrapped, isInstant) {\n      this.$flickity.select(index, isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the next slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    next(isWrapped, isInstant) {\n      this.$flickity.next(isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the previous slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    previous(isWrapped, isInstant) {\n      this.$flickity.previous(isWrapped, isInstant);\n    },\n\n    /**\n     * Select a cell\n     *\n     * @param {number} value\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    selectCell(value, isWrapped, isInstant) {\n      this.$flickity.selectCell(value, isWrapped, isInstant);\n    },\n\n    /**\n     * Sizing and Positioning\n     */\n\n    /**\n     * Trigger a resize event\n     */\n    resize() {\n      this.$flickity.resize();\n    },\n\n    /**\n     * Trigger a reposition event\n     */\n    reposition() {\n      this.$flickity.reposition();\n    },\n\n    /**\n     * Adding and removing cells\n     */\n\n    /**\n     * Prepend elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    prepend(elements) {\n      this.$flickity.prepend(elements);\n    },\n\n    /**\n     * Append elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    append(elements) {\n      this.$flickity.append(elements);\n    },\n\n    /**\n     * Insert elements at a given index\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     * @param {number} index\n     */\n    insert(elements, index) {\n      this.$flickity.insert(elements, index);\n    },\n\n    /**\n     * Remove elements from flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    remove(elements) {\n      this.$flickity.remove(elements);\n    },\n\n    /**\n     * Player\n     */\n\n    /**\n     * Trigger a playPlayer event\n     */\n    playPlayer() {\n      this.$flickity.playPlayer();\n    },\n\n    /**\n     * Trigger a stopPlayer event\n     */\n    stopPlayer() {\n      this.$flickity.stopPlayer();\n    },\n\n    /**\n     * Trigger a pausePlayer event\n     */\n    pausePlayer() {\n      this.$flickity.pausePlayer();\n    },\n\n    /**\n     * Trigger a unpausePlayer event\n     */\n    unpausePlayer() {\n      this.$flickity.unpausePlayer();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    rerender() {\n      this.$flickity.destroy();\n      this.init();\n    },\n\n    /**\n     * Utilities\n     */\n\n    /**\n     * Destroy the flickity instance\n     */\n    destroy() {\n      this.$flickity.destroy();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    reloadCells() {\n      this.$flickity.reloadCells();\n    },\n\n    /**\n     * Get the cell elements\n     *\n     * @return {array}\n     */\n    getCellElements() {\n      return this.$flickity.getCellElements();\n    },\n\n    /**\n     * Return flickity data\n     *\n     * @return {Flickity}\n     */\n    data() {\n      const Flickity = require('flickity');\n\n      return Flickity.data(this.$el);\n    },\n\n    /**\n     * Events\n     */\n\n    /**\n     * Attach an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    on(eventName, listener) {\n      this.$flickity.on(eventName, listener);\n    },\n\n    /**\n     * Remove an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    off(eventName, listener) {\n      this.$flickity.off(eventName, listener);\n    },\n\n    /**\n     * Attach an event once\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    once(eventName, listener) {\n      this.$flickity.once(eventName, listener);\n    },\n\n    /**\n     * Properties\n     */\n\n    /**\n     * Return the selected element\n     *\n     * @return {HTMLElement}\n     */\n    selectedElement() {\n      return this.$flickity.selectedElement;\n    },\n\n    /**\n     * Return the selected elements\n     *\n     * @return {array}\n     */\n    selectedElements() {\n      return this.$flickity.selectedElements;\n    },\n\n    /**\n     * Return the selected index\n     *\n     * @return {number}\n     */\n    selectedIndex() {\n      return this.$flickity.selectedIndex;\n    },\n\n    /**\n     * Return the cells\n     *\n     * @return {array}\n     */\n    cells() {\n      return this.$flickity.cells;\n    },\n\n    /**\n     * Return the slides\n     *\n     * @return {array}\n     */\n    slides() {\n      return this.$flickity.slides;\n    },\n\n    /**\n     * Disable dragging of slider\n     */\n    disableDrag() {\n      this.$flickity.options.draggable = false;\n      this.$flickity.updateDraggable();\n    },\n\n    /**\n     * Enable dragging of slider\n     */\n    enableDrag() {\n      this.$flickity.options.draggable = true;\n      this.$flickity.updateDraggable();\n    },\n  },\n};\n</script>\n\n<style src='flickity/dist/flickity.css'></style>\n","import mod from \"-!../../cache-loader/dist/cjs.js??ref--12-0!../../thread-loader/dist/cjs.js!../../babel-loader/lib/index.js!../../cache-loader/dist/cjs.js??ref--0-0!../../vue-loader/lib/index.js??vue-loader-options!./flickity.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../cache-loader/dist/cjs.js??ref--12-0!../../thread-loader/dist/cjs.js!../../babel-loader/lib/index.js!../../cache-loader/dist/cjs.js??ref--0-0!../../vue-loader/lib/index.js??vue-loader-options!./flickity.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./flickity.vue?vue&type=template&id=42695eab&\"\nimport script from \"./flickity.vue?vue&type=script&lang=js&\"\nexport * from \"./flickity.vue?vue&type=script&lang=js&\"\nimport style0 from \"flickity/dist/flickity.css?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}